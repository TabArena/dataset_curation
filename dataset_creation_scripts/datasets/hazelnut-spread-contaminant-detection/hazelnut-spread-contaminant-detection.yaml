#### For Dataset Description on OpenML
# Link to the original dataset source.
#   The DOI. Otherwise, URL to Kaggle, OpenML, etc.
original_dataset_source: "https://www.openml.org/search?type=data&status=active&id=45538"

# Academic reference or a please-cite-request for the dataset.
#   MLA-style reference, include DOI if possible.
reference: "Ricci, Marco, et al. 'Machine-learning-based microwave sensing: A case study for the food industry.' IEEE Journal on Emerging and Selected Topics in Circuits and Systems 11.3 (2021): 503-514. https://doi.org/10.1109/JETCAS.2021.3097699; Urbinati, Luca, et al. 'A machine-learning based microwave sensing approach to food contaminant detection.' 2020 IEEE International Symposium on Circuits and Systems (ISCAS). IEEE, 2020. https://doi.org/10.1109/ISCAS45731.2020.9181293"

# License under which the data is made available.
#   E.g. "CC BY 4.0", "MIT", "GPL-3.0", or "Public Domain".
licence: "CC BY-SA"

# When the data was collected/created. If unknown, the date when it was published.
#   Specific the year from the original source or academic reference.
#   Otherwise, provide an estimate.
dataset_year: "2020"

# Notes from us on how the dataset was curated.
#   - Description of any preprocessing steps we applied.
#   - Any oddities, anomalies, or manual fixes you encountered.
# For formatting, please add the bullet points to the list (start by replacing
#   the N/NA bullet point). This will be printed as a markdown enumeration on OpenML.
curation_comments: |
  - We select a features from a single frequency (10 GHz) as the authors also only considered this frequency for the final experiments.
  - Anomaly: we use the publicly available dataset state, which is without preprocessing. Moreover, we were not able to inverse the original ordinal encoding of the label.

#### For OpenML Metadata
# "classification" or "regression"
problem_type: "classification"

# Name of the target variable for prediction.
target_feature: "Contaminated"

# List of features that should be treated as categorical.
categorical_features: [] # No categorical features